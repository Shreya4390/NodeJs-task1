# Node.js as a File Server

The Node.js file system module allows you to work with the file system on your computer.

# To include the File System module, use the require() method:

var fs = require('fs');

# Common use for the File System module:

 1. Read Files
 2. Write Files
 3. Append Files
 4. Close Files
 5. Delete Files

//https://www.geeksforgeeks.org/node-js-file-system/
# What is Synchronous and Asynchronous approach?

    Synchronous approach: They are called blocking functions as it waits for each operation to complete, only after that, it executes the next operation, hence blocking the next command from execution i.e. a command will not be executed until & unless the query has finished executing to get all the result from previous commands.
    Asynchronous approach: They are called non-blocking functions as it never waits for each operation to complete, rather it executes all operations in the first go itself. The result of each operation will be handled once the result is available i.e. each command will be executed soon after the execution of the previous command. While the previous command runs in the background and loads the result once it is finished processing the data.
    Use cases:
        If your operations are not doing very heavy lifting like querying huge data from DB then go ahead with Synchronous way otherwise Asynchronous way.
        In an Asynchronous way, you can show some progress indicator to the user while in the background you can continue with your heavyweight works. This is an ideal scenario for GUI based apps.

# Open a File: 
The fs.open() method is used to create, read, or write a file. The fs.readFile() method is only for reading the file and fs.writeFile() method is only for writing to the file, whereas fs.open() method does several operations on a file. First, we need to load the fs class which is a module to access the physical file system.

Syntax:

fs.open(path, flags, mode, callback)


# Parameters:

    path: It holds the name of the file to read or the entire path if stored at other locations.
    flags: Flags indicate the behavior of the file to be opened. All possible values are ( r, r+, rs, rs+, w, wx, w+, wx+, a, ax, a+, ax+).
    mode: Sets the mode of file i.e. r-read, w-write, r+ -readwrite. It sets to default as readwrite.
# callback:

    It is a callback function that is called after reading a file. It takes two parameters:
    err: If any error occurs.
    data: Contents of the file. It is called after the open operation is executed.

# Reading a File: The fs.read() method is used to read the file specified by fd. This method reads the entire file into the buffer.

Syntax:

fs.read(fd, buffer, offset, length, position, callback)

Parameters:

    fd: This is the file descriptor returned by fs.open() method.
    buffer: This is the buffer that the data will be written to.
    offset: This is the offset in the buffer to start writing at.
    length: This is an integer specifying the number of bytes to read.
    position: This is an integer specifying where to begin reading from in the file. If the position is null, data will be read from the current file position.
    callback: It is a callback function that is called after reading of the file. It takes two parameters:
        err: If any error occurs.
        data: Contents of the file. 

# Writing to a File: This method will overwrite the file if the file already exists. The fs.writeFile() method is used to asynchronously write the specified data to a file. By default, the file would be replaced if it exists. The ‘options’ parameter can be used to modify the functionality of the method.


Syntax:

fs.writeFile(path, data, options, callback)

# Appending to a File: The fs.appendFile() method is used to synchronously append the data to the file.

Syntax:

fs.appendFile(filepath, data, options, callback);

or

fs.appendFileSync(filepath, data, options);

# Closing the File: The fs.close() method is used to asynchronously close the given file descriptor thereby clearing the file that is associated with it. This will allow the file descriptor to be reused for other files. Calling fs.close() on a file descriptor while some other operation is being performed on it may lead to undefined behavior.

Syntax:
           
fs.close(fd, callback)


# Delete a File: The fs.unlink() method is used to remove a file or symbolic link from the filesystem. This function does not work on directories, therefore it is recommended to use fs.rmdir() to remove a directory.

Syntax:

fs.unlink(path, callback)